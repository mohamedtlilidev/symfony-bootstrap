<?php
/**
 * Created by PhpStorm.
 * User: g361183
 * Date: 4/13/20
 * Time: 12:23 PM
 */

namespace App\Repository;

use App\Entity\ActHiProcinst;
use Doctrine\Bundle\DoctrineBundle\Repository\ServiceEntityRepository;
use Doctrine\ORM\EntityManagerInterface;
use Doctrine\ORM\EntityRepository;
use Doctrine\ORM\Mapping;
use Doctrine\ORM\Query\ResultSetMapping;

class ActHiProcinstRepository extends EntityRepository
{


    public function __construct(EntityManagerInterface $em, Mapping\ClassMetadata $class)
    {
        parent::__construct($em, $class);
    }

    public function findAll()
    {
        return parent::findAll(); // TODO: Change the autogenerated stub
    }
//
//   public function getWorkflowStatus($start=0,$offset=100)
//   {
//       $qb=$this->createQueryBuilder('ahpv');
//       $qb->select('ahpv.procInstId,ahpv.name, ahpv.startTime,ahpv.endTime, ahpv.duration, ahpv.deleteReason')
//           ->from('App\Entity\ActHiProcinst', 'ahp')
//           ->setMaxResults($offset)
//           ->setFirstResult($start);
//       return $qb->getQuery()->getArrayResult();
//   }

    public function getAllDataWorkflow()
    {
        $em=$this->getEntityManager();
        $rsm=new ResultSetMapping();
        $rsm->addScalarResult('proc_inst_id_', 'identifiant');
        $rsm->addScalarResult('proc_def_id_', 'Titre');
        $rsm->addScalarResult('start_time_', 'start_time_');
        $rsm->addScalarResult('end_time_', 'end_time_');
        $rsm->addScalarResult('duration_', 'duration_');
        $rsm->addScalarResult('name_', 'name_');
        $rsm->addScalarResult('text_', 'text_');
        $sql="select act_proc.proc_inst_id_, act_proc.proc_def_id_,act_proc.start_time_, act_proc.end_time_,act_proc.duration_,act_var.name_, act_var.text_
        from ACT_HI_PROCINST act_proc
        inner join ACT_HI_VARINST as act_var on act_var.PROC_INST_ID_=act_proc.PROC_INST_ID_
        where act_proc.proc_def_id_ like '%GEDDSM%'
         ";
        $query=$em->createNativeQuery($sql, $rsm);
        $data=$query->getResult();

    }

    public function getWorkflowStatus($start=0, $offset=100)
    {
        $qb=$this->createQueryBuilder('ahpv');
        $qb->select('ahpv.procInstId,ahpv.procDefId,ahpv.name,ahpv.endTime, ahpv.deleteReason')
            ->andWhere('ahpv.endTime is not null')
            ->andWhere('ahpv.deleteReason is null')
            ->andWhere('ahpv.procDefId like :procDefId')
            ->setParameter('procDefId', "%GEDDSM%")
            ->setMaxResults($offset)
            ->setFirstResult($start);
        return $qb->getQuery()->getArrayResult();
    }

    public function getRecordProcesses(array $options=[])
    {
        $qb=$this->createQueryBuilder('ahp');
        $qb->select('procDefId, startTime,endTime, duration, deleteReason')
            ->from('App\Entity\ActHiProcinst', 'ahp')
            ->where('ahp.startTime =:startTime')
            ->andWhere('ahp.endTime = :endTime');


        foreach ($options as $key=>$option) {
            if ($option) {
                $qb->setParameter($key, $option);

            }
        }

//       if($options['startTime'])
//       {
//           $qb->setParameter('startTime', $options['startTime']);
//       }
//       if($options['endTime'])
//       {
//           $qb->setParameter('endTime', $options['endTime']);
//       }
        return $qb->getQuery()->execute();
    }

}